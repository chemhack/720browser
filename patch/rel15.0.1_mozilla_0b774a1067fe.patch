diff -r 0b774a1067fe browser/app/nsBrowserApp.cpp
--- a/browser/app/nsBrowserApp.cpp	Wed Sep 05 14:59:17 2012 -0700
+++ b/browser/app/nsBrowserApp.cpp	Mon Sep 10 11:44:57 2012 +0800
@@ -32,16 +32,22 @@
 #define strcasecmp _stricmp
 #endif
 #include "BinaryPath.h"
 
 #include "nsXPCOMPrivate.h" // for MAXPATHLEN and XPCOM_DLL
 
 #include "mozilla/Telemetry.h"
 
+#define T20BRS 1
+
+#ifdef T20BRS
+#include <libproc.h>
+#endif
+
 static void Output(const char *fmt, ... )
 {
   va_list ap;
   va_start(ap, fmt);
 
 #if defined(XP_WIN) && !MOZ_WINCONSOLE
   PRUnichar msg[2048];
   _vsnwprintf(msg, sizeof(msg)/sizeof(msg[0]), NS_ConvertUTF8toUTF16(fmt).get(), ap);
@@ -148,18 +154,34 @@ static int do_main(int argc, char* argv[
     if (NS_FAILED(rv)) {
       Output("Couldn't read application.ini");
       return 255;
     }
     int result = XRE_main(argc, argv, appData, 0);
     XRE_FreeAppData(appData);
     return result;
   }
-
+#ifdef T20BRS
+  char buf[4096];
+  int ret;
+  pid_t pid; 
+  pid = getpid();
+  ret = proc_pidpath (pid, buf, sizeof(buf));
+  if (ret <= 0)
+    return XRE_main(argc, argv, &sAppData, 0);
+  buf[ret-8] = 0; // removing "/firefox"
+  char profdir[4096];
+  sprintf(profdir, "%s/720Browser", buf);
+  char* firefox = "firefox";
+  char* profile = "-profile";
+  char* argvv[] = {firefox, profile, profdir};
+  return XRE_main(3, argvv, &sAppData, 0);
+#else
   return XRE_main(argc, argv, &sAppData, 0);
+#endif
 }
 
 #ifdef XP_WIN
 /**
  * Determines if the registry is disabled via the service or not.
  * 
  * @return true if prefetch is disabled
  *         false if prefetch is not disabled or an error occurred.
diff -r 0b774a1067fe security/nss/lib/ckfw/builtins/certdata.c
--- a/security/nss/lib/ckfw/builtins/certdata.c	Wed Sep 05 14:59:17 2012 -0700
+++ b/security/nss/lib/ckfw/builtins/certdata.c	Mon Sep 10 11:44:57 2012 +0800
@@ -721,22 +721,16 @@ static const CK_ATTRIBUTE_TYPE nss_built
  CKA_CLASS,  CKA_TOKEN,  CKA_PRIVATE,  CKA_MODIFIABLE,  CKA_LABEL,  CKA_CERT_SHA1_HASH,  CKA_CERT_MD5_HASH,  CKA_ISSUER,  CKA_SERIAL_NUMBER,  CKA_TRUST_SERVER_AUTH,  CKA_TRUST_EMAIL_PROTECTION,  CKA_TRUST_CODE_SIGNING,  CKA_TRUST_STEP_UP_APPROVED
 };
 static const CK_ATTRIBUTE_TYPE nss_builtins_types_222 [] = {
  CKA_CLASS,  CKA_TOKEN,  CKA_PRIVATE,  CKA_MODIFIABLE,  CKA_LABEL,  CKA_CERTIFICATE_TYPE,  CKA_SUBJECT,  CKA_ID,  CKA_ISSUER,  CKA_SERIAL_NUMBER,  CKA_VALUE
 };
 static const CK_ATTRIBUTE_TYPE nss_builtins_types_223 [] = {
  CKA_CLASS,  CKA_TOKEN,  CKA_PRIVATE,  CKA_MODIFIABLE,  CKA_LABEL,  CKA_CERT_SHA1_HASH,  CKA_CERT_MD5_HASH,  CKA_ISSUER,  CKA_SERIAL_NUMBER,  CKA_TRUST_SERVER_AUTH,  CKA_TRUST_EMAIL_PROTECTION,  CKA_TRUST_CODE_SIGNING,  CKA_TRUST_STEP_UP_APPROVED
 };
-static const CK_ATTRIBUTE_TYPE nss_builtins_types_224 [] = {
- CKA_CLASS,  CKA_TOKEN,  CKA_PRIVATE,  CKA_MODIFIABLE,  CKA_LABEL,  CKA_CERTIFICATE_TYPE,  CKA_SUBJECT,  CKA_ID,  CKA_ISSUER,  CKA_SERIAL_NUMBER,  CKA_VALUE
-};
-static const CK_ATTRIBUTE_TYPE nss_builtins_types_225 [] = {
- CKA_CLASS,  CKA_TOKEN,  CKA_PRIVATE,  CKA_MODIFIABLE,  CKA_LABEL,  CKA_CERT_SHA1_HASH,  CKA_CERT_MD5_HASH,  CKA_ISSUER,  CKA_SERIAL_NUMBER,  CKA_TRUST_SERVER_AUTH,  CKA_TRUST_EMAIL_PROTECTION,  CKA_TRUST_CODE_SIGNING,  CKA_TRUST_STEP_UP_APPROVED
-};
 static const CK_ATTRIBUTE_TYPE nss_builtins_types_226 [] = {
  CKA_CLASS,  CKA_TOKEN,  CKA_PRIVATE,  CKA_MODIFIABLE,  CKA_LABEL,  CKA_CERTIFICATE_TYPE,  CKA_SUBJECT,  CKA_ID,  CKA_ISSUER,  CKA_SERIAL_NUMBER,  CKA_VALUE
 };
 static const CK_ATTRIBUTE_TYPE nss_builtins_types_227 [] = {
  CKA_CLASS,  CKA_TOKEN,  CKA_PRIVATE,  CKA_MODIFIABLE,  CKA_LABEL,  CKA_CERT_SHA1_HASH,  CKA_CERT_MD5_HASH,  CKA_ISSUER,  CKA_SERIAL_NUMBER,  CKA_TRUST_SERVER_AUTH,  CKA_TRUST_EMAIL_PROTECTION,  CKA_TRUST_CODE_SIGNING,  CKA_TRUST_STEP_UP_APPROVED
 };
 static const CK_ATTRIBUTE_TYPE nss_builtins_types_228 [] = {
  CKA_CLASS,  CKA_TOKEN,  CKA_PRIVATE,  CKA_MODIFIABLE,  CKA_LABEL,  CKA_CERTIFICATE_TYPE,  CKA_SUBJECT,  CKA_ID,  CKA_ISSUER,  CKA_SERIAL_NUMBER,  CKA_VALUE
@@ -15030,115 +15024,16 @@ static const NSSItem nss_builtins_items_
 , (PRUint32)61 },
   { (void *)"\002\006\040\006\005\026\160\002"
 , (PRUint32)8 },
   { (void *)&ckt_nss_trusted_delegator, (PRUint32)sizeof(CK_TRUST) },
   { (void *)&ckt_nss_trusted_delegator, (PRUint32)sizeof(CK_TRUST) },
   { (void *)&ckt_nss_trusted_delegator, (PRUint32)sizeof(CK_TRUST) },
   { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) }
 };
-static const NSSItem nss_builtins_items_224 [] = {
-  { (void *)&cko_certificate, (PRUint32)sizeof(CK_OBJECT_CLASS) },
-  { (void *)&ck_true, (PRUint32)sizeof(CK_BBOOL) },
-  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
-  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
-  { (void *)"CNNIC ROOT", (PRUint32)11 },
-  { (void *)&ckc_x_509, (PRUint32)sizeof(CK_CERTIFICATE_TYPE) },
-  { (void *)"\060\062\061\013\060\011\006\003\125\004\006\023\002\103\116\061"
-"\016\060\014\006\003\125\004\012\023\005\103\116\116\111\103\061"
-"\023\060\021\006\003\125\004\003\023\012\103\116\116\111\103\040"
-"\122\117\117\124"
-, (PRUint32)52 },
-  { (void *)"0", (PRUint32)2 },
-  { (void *)"\060\062\061\013\060\011\006\003\125\004\006\023\002\103\116\061"
-"\016\060\014\006\003\125\004\012\023\005\103\116\116\111\103\061"
-"\023\060\021\006\003\125\004\003\023\012\103\116\116\111\103\040"
-"\122\117\117\124"
-, (PRUint32)52 },
-  { (void *)"\002\004\111\063\000\001"
-, (PRUint32)6 },
-  { (void *)"\060\202\003\125\060\202\002\075\240\003\002\001\002\002\004\111"
-"\063\000\001\060\015\006\011\052\206\110\206\367\015\001\001\005"
-"\005\000\060\062\061\013\060\011\006\003\125\004\006\023\002\103"
-"\116\061\016\060\014\006\003\125\004\012\023\005\103\116\116\111"
-"\103\061\023\060\021\006\003\125\004\003\023\012\103\116\116\111"
-"\103\040\122\117\117\124\060\036\027\015\060\067\060\064\061\066"
-"\060\067\060\071\061\064\132\027\015\062\067\060\064\061\066\060"
-"\067\060\071\061\064\132\060\062\061\013\060\011\006\003\125\004"
-"\006\023\002\103\116\061\016\060\014\006\003\125\004\012\023\005"
-"\103\116\116\111\103\061\023\060\021\006\003\125\004\003\023\012"
-"\103\116\116\111\103\040\122\117\117\124\060\202\001\042\060\015"
-"\006\011\052\206\110\206\367\015\001\001\001\005\000\003\202\001"
-"\017\000\060\202\001\012\002\202\001\001\000\323\065\367\077\163"
-"\167\255\350\133\163\027\302\321\157\355\125\274\156\352\350\244"
-"\171\262\154\303\243\357\341\237\261\073\110\205\365\232\134\041"
-"\042\020\054\305\202\316\332\343\232\156\067\341\207\054\334\271"
-"\014\132\272\210\125\337\375\252\333\037\061\352\001\361\337\071"
-"\001\301\023\375\110\122\041\304\125\337\332\330\263\124\166\272"
-"\164\261\267\175\327\300\350\366\131\305\115\310\275\255\037\024"
-"\332\337\130\104\045\062\031\052\307\176\176\216\256\070\260\060"
-"\173\107\162\011\061\360\060\333\303\033\166\051\273\151\166\116"
-"\127\371\033\144\242\223\126\267\157\231\156\333\012\004\234\021"
-"\343\200\037\313\143\224\020\012\251\341\144\202\061\371\214\047"
-"\355\246\231\000\366\160\223\030\370\241\064\206\243\335\172\302"
-"\030\171\366\172\145\065\317\220\353\275\063\223\237\123\253\163"
-"\073\346\233\064\040\057\035\357\251\035\143\032\240\200\333\003"
-"\057\371\046\032\206\322\215\273\251\276\122\072\207\147\110\015"
-"\277\264\240\330\046\276\043\137\163\067\177\046\346\222\004\243"
-"\177\317\040\247\267\363\072\312\313\231\313\002\003\001\000\001"
-"\243\163\060\161\060\021\006\011\140\206\110\001\206\370\102\001"
-"\001\004\004\003\002\000\007\060\037\006\003\125\035\043\004\030"
-"\060\026\200\024\145\362\061\255\052\367\367\335\122\226\012\307"
-"\002\301\016\357\246\325\073\021\060\017\006\003\125\035\023\001"
-"\001\377\004\005\060\003\001\001\377\060\013\006\003\125\035\017"
-"\004\004\003\002\001\376\060\035\006\003\125\035\016\004\026\004"
-"\024\145\362\061\255\052\367\367\335\122\226\012\307\002\301\016"
-"\357\246\325\073\021\060\015\006\011\052\206\110\206\367\015\001"
-"\001\005\005\000\003\202\001\001\000\113\065\356\314\344\256\277"
-"\303\156\255\237\225\073\113\077\133\036\337\127\051\242\131\312"
-"\070\342\271\032\377\236\346\156\062\335\036\256\352\065\267\365"
-"\223\221\116\332\102\341\303\027\140\120\362\321\134\046\271\202"
-"\267\352\155\344\234\204\347\003\171\027\257\230\075\224\333\307"
-"\272\000\347\270\277\001\127\301\167\105\062\014\073\361\264\034"
-"\010\260\375\121\240\241\335\232\035\023\066\232\155\267\307\074"
-"\271\341\305\331\027\372\203\325\075\025\240\074\273\036\013\342"
-"\310\220\077\250\206\014\374\371\213\136\205\313\117\133\113\142"
-"\021\107\305\105\174\005\057\101\261\236\020\151\033\231\226\340"
-"\125\171\373\116\206\231\270\224\332\206\070\152\223\243\347\313"
-"\156\345\337\352\041\125\211\234\175\175\177\230\365\000\211\356"
-"\343\204\300\134\226\265\305\106\352\106\340\205\125\266\033\311"
-"\022\326\301\315\315\200\363\002\001\074\310\151\313\105\110\143"
-"\330\224\320\354\205\016\073\116\021\145\364\202\214\246\075\256"
-"\056\042\224\011\310\134\352\074\201\135\026\052\003\227\026\125"
-"\011\333\212\101\202\236\146\233\021"
-, (PRUint32)857 }
-};
-static const NSSItem nss_builtins_items_225 [] = {
-  { (void *)&cko_nss_trust, (PRUint32)sizeof(CK_OBJECT_CLASS) },
-  { (void *)&ck_true, (PRUint32)sizeof(CK_BBOOL) },
-  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
-  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
-  { (void *)"CNNIC ROOT", (PRUint32)11 },
-  { (void *)"\213\257\114\233\035\360\052\222\367\332\022\216\271\033\254\364"
-"\230\140\113\157"
-, (PRUint32)20 },
-  { (void *)"\041\274\202\253\111\304\023\073\113\262\053\134\153\220\234\031"
-, (PRUint32)16 },
-  { (void *)"\060\062\061\013\060\011\006\003\125\004\006\023\002\103\116\061"
-"\016\060\014\006\003\125\004\012\023\005\103\116\116\111\103\061"
-"\023\060\021\006\003\125\004\003\023\012\103\116\116\111\103\040"
-"\122\117\117\124"
-, (PRUint32)52 },
-  { (void *)"\002\004\111\063\000\001"
-, (PRUint32)6 },
-  { (void *)&ckt_nss_trusted_delegator, (PRUint32)sizeof(CK_TRUST) },
-  { (void *)&ckt_nss_must_verify_trust, (PRUint32)sizeof(CK_TRUST) },
-  { (void *)&ckt_nss_must_verify_trust, (PRUint32)sizeof(CK_TRUST) },
-  { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) }
-};
 static const NSSItem nss_builtins_items_226 [] = {
   { (void *)&cko_certificate, (PRUint32)sizeof(CK_OBJECT_CLASS) },
   { (void *)&ck_true, (PRUint32)sizeof(CK_BBOOL) },
   { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
   { (void *)&ck_false, (PRUint32)sizeof(CK_BBOOL) },
   { (void *)"ApplicationCA - Japanese Government", (PRUint32)36 },
   { (void *)&ckc_x_509, (PRUint32)sizeof(CK_CERTIFICATE_TYPE) },
   { (void *)"\060\103\061\013\060\011\006\003\125\004\006\023\002\112\120\061"
@@ -23863,18 +23758,16 @@ nss_builtins_data[] = {
   { 11, nss_builtins_types_216, nss_builtins_items_216, {NULL} },
   { 13, nss_builtins_types_217, nss_builtins_items_217, {NULL} },
   { 11, nss_builtins_types_218, nss_builtins_items_218, {NULL} },
   { 13, nss_builtins_types_219, nss_builtins_items_219, {NULL} },
   { 11, nss_builtins_types_220, nss_builtins_items_220, {NULL} },
   { 13, nss_builtins_types_221, nss_builtins_items_221, {NULL} },
   { 11, nss_builtins_types_222, nss_builtins_items_222, {NULL} },
   { 13, nss_builtins_types_223, nss_builtins_items_223, {NULL} },
-  { 11, nss_builtins_types_224, nss_builtins_items_224, {NULL} },
-  { 13, nss_builtins_types_225, nss_builtins_items_225, {NULL} },
   { 11, nss_builtins_types_226, nss_builtins_items_226, {NULL} },
   { 13, nss_builtins_types_227, nss_builtins_items_227, {NULL} },
   { 11, nss_builtins_types_228, nss_builtins_items_228, {NULL} },
   { 13, nss_builtins_types_229, nss_builtins_items_229, {NULL} },
   { 11, nss_builtins_types_230, nss_builtins_items_230, {NULL} },
   { 13, nss_builtins_types_231, nss_builtins_items_231, {NULL} },
   { 11, nss_builtins_types_232, nss_builtins_items_232, {NULL} },
   { 13, nss_builtins_types_233, nss_builtins_items_233, {NULL} },
@@ -23996,12 +23889,12 @@ nss_builtins_data[] = {
   { 13, nss_builtins_types_349, nss_builtins_items_349, {NULL} },
   { 11, nss_builtins_types_350, nss_builtins_items_350, {NULL} },
   { 13, nss_builtins_types_351, nss_builtins_items_351, {NULL} },
   { 11, nss_builtins_types_352, nss_builtins_items_352, {NULL} },
   { 13, nss_builtins_types_353, nss_builtins_items_353, {NULL} }
 };
 const PRUint32
 #ifdef DEBUG
-  nss_builtins_nObjects = 353+1;
+  nss_builtins_nObjects = 353+1-2; /* -2 Removing two CNNIC cert */
 #else
-  nss_builtins_nObjects = 353;
+  nss_builtins_nObjects = 353-2; /* -2 Removing two CNNIC cert */
 #endif /* DEBUG */
diff -r 0b774a1067fe security/nss/lib/ckfw/builtins/certdata.txt
--- a/security/nss/lib/ckfw/builtins/certdata.txt	Wed Sep 05 14:59:17 2012 -0700
+++ b/security/nss/lib/ckfw/builtins/certdata.txt	Mon Sep 10 11:44:57 2012 +0800
@@ -15109,125 +15109,16 @@ CKA_SERIAL_NUMBER MULTILINE_OCTAL
 \002\006\040\006\005\026\160\002
 END
 CKA_TRUST_SERVER_AUTH CK_TRUST CKT_NSS_TRUSTED_DELEGATOR
 CKA_TRUST_EMAIL_PROTECTION CK_TRUST CKT_NSS_TRUSTED_DELEGATOR
 CKA_TRUST_CODE_SIGNING CK_TRUST CKT_NSS_TRUSTED_DELEGATOR
 CKA_TRUST_STEP_UP_APPROVED CK_BBOOL CK_FALSE
 
 #
-# Certificate "CNNIC ROOT"
-#
-CKA_CLASS CK_OBJECT_CLASS CKO_CERTIFICATE
-CKA_TOKEN CK_BBOOL CK_TRUE
-CKA_PRIVATE CK_BBOOL CK_FALSE
-CKA_MODIFIABLE CK_BBOOL CK_FALSE
-CKA_LABEL UTF8 "CNNIC ROOT"
-CKA_CERTIFICATE_TYPE CK_CERTIFICATE_TYPE CKC_X_509
-CKA_SUBJECT MULTILINE_OCTAL
-\060\062\061\013\060\011\006\003\125\004\006\023\002\103\116\061
-\016\060\014\006\003\125\004\012\023\005\103\116\116\111\103\061
-\023\060\021\006\003\125\004\003\023\012\103\116\116\111\103\040
-\122\117\117\124
-END
-CKA_ID UTF8 "0"
-CKA_ISSUER MULTILINE_OCTAL
-\060\062\061\013\060\011\006\003\125\004\006\023\002\103\116\061
-\016\060\014\006\003\125\004\012\023\005\103\116\116\111\103\061
-\023\060\021\006\003\125\004\003\023\012\103\116\116\111\103\040
-\122\117\117\124
-END
-CKA_SERIAL_NUMBER MULTILINE_OCTAL
-\002\004\111\063\000\001
-END
-CKA_VALUE MULTILINE_OCTAL
-\060\202\003\125\060\202\002\075\240\003\002\001\002\002\004\111
-\063\000\001\060\015\006\011\052\206\110\206\367\015\001\001\005
-\005\000\060\062\061\013\060\011\006\003\125\004\006\023\002\103
-\116\061\016\060\014\006\003\125\004\012\023\005\103\116\116\111
-\103\061\023\060\021\006\003\125\004\003\023\012\103\116\116\111
-\103\040\122\117\117\124\060\036\027\015\060\067\060\064\061\066
-\060\067\060\071\061\064\132\027\015\062\067\060\064\061\066\060
-\067\060\071\061\064\132\060\062\061\013\060\011\006\003\125\004
-\006\023\002\103\116\061\016\060\014\006\003\125\004\012\023\005
-\103\116\116\111\103\061\023\060\021\006\003\125\004\003\023\012
-\103\116\116\111\103\040\122\117\117\124\060\202\001\042\060\015
-\006\011\052\206\110\206\367\015\001\001\001\005\000\003\202\001
-\017\000\060\202\001\012\002\202\001\001\000\323\065\367\077\163
-\167\255\350\133\163\027\302\321\157\355\125\274\156\352\350\244
-\171\262\154\303\243\357\341\237\261\073\110\205\365\232\134\041
-\042\020\054\305\202\316\332\343\232\156\067\341\207\054\334\271
-\014\132\272\210\125\337\375\252\333\037\061\352\001\361\337\071
-\001\301\023\375\110\122\041\304\125\337\332\330\263\124\166\272
-\164\261\267\175\327\300\350\366\131\305\115\310\275\255\037\024
-\332\337\130\104\045\062\031\052\307\176\176\216\256\070\260\060
-\173\107\162\011\061\360\060\333\303\033\166\051\273\151\166\116
-\127\371\033\144\242\223\126\267\157\231\156\333\012\004\234\021
-\343\200\037\313\143\224\020\012\251\341\144\202\061\371\214\047
-\355\246\231\000\366\160\223\030\370\241\064\206\243\335\172\302
-\030\171\366\172\145\065\317\220\353\275\063\223\237\123\253\163
-\073\346\233\064\040\057\035\357\251\035\143\032\240\200\333\003
-\057\371\046\032\206\322\215\273\251\276\122\072\207\147\110\015
-\277\264\240\330\046\276\043\137\163\067\177\046\346\222\004\243
-\177\317\040\247\267\363\072\312\313\231\313\002\003\001\000\001
-\243\163\060\161\060\021\006\011\140\206\110\001\206\370\102\001
-\001\004\004\003\002\000\007\060\037\006\003\125\035\043\004\030
-\060\026\200\024\145\362\061\255\052\367\367\335\122\226\012\307
-\002\301\016\357\246\325\073\021\060\017\006\003\125\035\023\001
-\001\377\004\005\060\003\001\001\377\060\013\006\003\125\035\017
-\004\004\003\002\001\376\060\035\006\003\125\035\016\004\026\004
-\024\145\362\061\255\052\367\367\335\122\226\012\307\002\301\016
-\357\246\325\073\021\060\015\006\011\052\206\110\206\367\015\001
-\001\005\005\000\003\202\001\001\000\113\065\356\314\344\256\277
-\303\156\255\237\225\073\113\077\133\036\337\127\051\242\131\312
-\070\342\271\032\377\236\346\156\062\335\036\256\352\065\267\365
-\223\221\116\332\102\341\303\027\140\120\362\321\134\046\271\202
-\267\352\155\344\234\204\347\003\171\027\257\230\075\224\333\307
-\272\000\347\270\277\001\127\301\167\105\062\014\073\361\264\034
-\010\260\375\121\240\241\335\232\035\023\066\232\155\267\307\074
-\271\341\305\331\027\372\203\325\075\025\240\074\273\036\013\342
-\310\220\077\250\206\014\374\371\213\136\205\313\117\133\113\142
-\021\107\305\105\174\005\057\101\261\236\020\151\033\231\226\340
-\125\171\373\116\206\231\270\224\332\206\070\152\223\243\347\313
-\156\345\337\352\041\125\211\234\175\175\177\230\365\000\211\356
-\343\204\300\134\226\265\305\106\352\106\340\205\125\266\033\311
-\022\326\301\315\315\200\363\002\001\074\310\151\313\105\110\143
-\330\224\320\354\205\016\073\116\021\145\364\202\214\246\075\256
-\056\042\224\011\310\134\352\074\201\135\026\052\003\227\026\125
-\011\333\212\101\202\236\146\233\021
-END
-
-# Trust for Certificate "CNNIC ROOT"
-CKA_CLASS CK_OBJECT_CLASS CKO_NSS_TRUST
-CKA_TOKEN CK_BBOOL CK_TRUE
-CKA_PRIVATE CK_BBOOL CK_FALSE
-CKA_MODIFIABLE CK_BBOOL CK_FALSE
-CKA_LABEL UTF8 "CNNIC ROOT"
-CKA_CERT_SHA1_HASH MULTILINE_OCTAL
-\213\257\114\233\035\360\052\222\367\332\022\216\271\033\254\364
-\230\140\113\157
-END
-CKA_CERT_MD5_HASH MULTILINE_OCTAL
-\041\274\202\253\111\304\023\073\113\262\053\134\153\220\234\031
-END
-CKA_ISSUER MULTILINE_OCTAL
-\060\062\061\013\060\011\006\003\125\004\006\023\002\103\116\061
-\016\060\014\006\003\125\004\012\023\005\103\116\116\111\103\061
-\023\060\021\006\003\125\004\003\023\012\103\116\116\111\103\040
-\122\117\117\124
-END
-CKA_SERIAL_NUMBER MULTILINE_OCTAL
-\002\004\111\063\000\001
-END
-CKA_TRUST_SERVER_AUTH CK_TRUST CKT_NSS_TRUSTED_DELEGATOR
-CKA_TRUST_EMAIL_PROTECTION CK_TRUST CKT_NSS_MUST_VERIFY_TRUST
-CKA_TRUST_CODE_SIGNING CK_TRUST CKT_NSS_MUST_VERIFY_TRUST
-CKA_TRUST_STEP_UP_APPROVED CK_BBOOL CK_FALSE
-
-#
 # Certificate "ApplicationCA - Japanese Government"
 #
 CKA_CLASS CK_OBJECT_CLASS CKO_CERTIFICATE
 CKA_TOKEN CK_BBOOL CK_TRUE
 CKA_PRIVATE CK_BBOOL CK_FALSE
 CKA_MODIFIABLE CK_BBOOL CK_FALSE
 CKA_LABEL UTF8 "ApplicationCA - Japanese Government"
 CKA_CERTIFICATE_TYPE CK_CERTIFICATE_TYPE CKC_X_509
