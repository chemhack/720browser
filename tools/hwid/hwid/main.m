//
//  main.m
//  hwid
//
//  Created by Harry Li on 9/10/12.
//  Copyright (c) 2012 720Browser. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <CommonCrypto/CommonDigest.h>
#import <ifaddrs.h>
#import <arpa/inet.h>
#import <net/ethernet.h>
#import <net/if_dl.h>

int main(int argc, const char * argv[])
{

    @autoreleasepool {
//        const char *executablePath = [[[[NSProcessInfo processInfo] arguments] objectAtIndex:0] fileSystemRepresentation];
//        printf("executablePath == %s\n", executablePath);

        const unsigned char pool [] = {0x5b, 0xee, 0x13, 0x56, 0x81, 0x66, 0xd7, 0x40, 0xe1, 0x62, 0x51, 0x47, 0x73, 0x34, 0x31, 0xb8, 0x48, 0x71, 0x56, 0xc1, 0x89, 0x63, 0xcd, 0x1f, 0x59, 0x2f, 0xb4, 0x8d, 0x02, 0x99, 0x0e, 0xef, 0x99, 0x99, 0x7f, 0x61, 0xf1, 0x1c, 0xdc, 0x1b, 0x7a, 0x4b, 0x20, 0x8a, 0xc1, 0x21, 0xa8, 0xc3, 0x72, 0xa1, 0x5d, 0x32, 0xd8, 0x2c, 0xeb, 0xab, 0xf6, 0x3a, 0x41, 0xa7, 0x3f, 0x0f, 0x80, 0x5c, 0xf6, 0x39, 0x9a, 0xd9, 0x1c, 0xd6, 0xed, 0x14, 0xd3, 0x92, 0x52, 0xb4, 0xda, 0x21, 0x3c, 0x78, 0x6c, 0x71, 0xc5, 0xf7, 0x71, 0x84, 0x18, 0x75, 0x77, 0x11, 0x0f, 0xfa, 0xb0, 0x29, 0x2f, 0x04, 0x87, 0xa4, 0xb7, 0xa3, 0x58, 0x02, 0x3f, 0x91, 0xf1, 0xe5, 0x29, 0xd0, 0xce, 0x49, 0xf2, 0x2d, 0x88, 0xb1, 0x96, 0xcd, 0x70, 0x24, 0x74, 0xad, 0x5f, 0x11, 0x46, 0x92, 0xe3, 0xa2, 0x39, 0x1c, 0xb2, 0x88, 0xae, 0xeb, 0xd7, 0xb1, 0xca, 0xc6, 0x3e, 0x25, 0x3b, 0xc1, 0x4c, 0x55, 0x16, 0x6d, 0xbf, 0x8c, 0xd7, 0x11, 0x8d, 0xd8, 0x2f, 0x7f, 0x95, 0x28, 0x22, 0x36, 0xf4, 0xb4, 0xc9, 0xc9, 0x78, 0xd2, 0x48, 0x43, 0x49, 0xfd, 0x11, 0xbb, 0xca, 0xfe, 0x06, 0xdb, 0x77, 0x28, 0xfe, 0xbc, 0x70, 0xc4, 0xde, 0xc1, 0xdf, 0xe7, 0x75, 0x5d, 0x0e, 0x20, 0x0c, 0xc9, 0x73, 0xd6, 0xc0, 0xc8, 0xb4, 0xc4, 0x0f, 0x9d, 0x13, 0x7f, 0x8c, 0x1e, 0xd9, 0x00, 0x46, 0x2d, 0x64, 0x54, 0xc8, 0x9e, 0x16, 0xdd, 0xb3, 0xfc, 0xf3, 0x3d, 0xf3, 0x59, 0xbf, 0x90, 0xb8, 0x5d, 0x79, 0xec, 0xef, 0xb2, 0x31, 0x7e, 0x64, 0x6e, 0x37, 0x9a, 0xc1, 0xaf, 0x93, 0xa3, 0x6e, 0x82, 0x61, 0xf0, 0x16, 0x25, 0x6b, 0x76, 0x14, 0xe6, 0x62, 0xb7, 0x1c, 0xb3, 0xf4, 0xc9, 0xba, 0xda, 0xc7, 0xdd, 0x23, 0xd2, 0x62, 0x91, 0x73, 0x68, 0xf6, 0x6f, 0x0f, 0x6e, 0xe8, 0xa9, 0x44, 0x24, 0xbb, 0x67, 0x9f, 0xf0, 0x23, 0xf2, 0x85, 0x1c, 0x03, 0x6e, 0x70, 0x90, 0xc0, 0xca, 0xf2, 0xb1, 0x55, 0x2b, 0xc8, 0x18, 0x52, 0x5a, 0xe6, 0xb3, 0xec, 0x5c, 0xc1, 0x14, 0xc6, 0xcb, 0x43, 0x1f, 0x9e, 0xd9, 0x5a, 0xd3, 0x88, 0x69, 0xb0, 0x55, 0xc0, 0xde, 0xa1, 0xfd, 0x3e, 0x66, 0x9e, 0x23, 0x58, 0x1b, 0xab, 0xef, 0x9e, 0x00, 0xa1, 0x1b, 0x07, 0xa0, 0x8f, 0x3f, 0x9d, 0x0e, 0xde, 0x33, 0xb4, 0x9c, 0x73, 0x72, 0x88, 0x0d, 0xfe, 0xde, 0x8f, 0x18, 0x1e, 0x90, 0x80, 0x45, 0x93, 0x66, 0xea, 0xcf, 0xfb, 0x54, 0x80, 0xdc, 0xc3, 0xc2, 0xbf, 0xa6, 0x3e, 0xf7, 0x9c, 0x11, 0x86, 0x3c, 0x82, 0x58, 0xb8, 0x72, 0x4e, 0xfa, 0x34, 0x6f, 0xeb, 0x1e, 0x46, 0x0e, 0x84, 0x70, 0x2b, 0x9c, 0x91, 0xfc, 0xc8, 0xc1, 0x2c, 0xdb, 0x5a, 0x12, 0x8d, 0xc8, 0xcf, 0x19, 0x48, 0xfe, 0xd7, 0x79, 0x8a, 0x69, 0x51, 0xad, 0x6c, 0xdf, 0x42, 0x96, 0x43, 0xec, 0xec, 0x58, 0xbc, 0xb8, 0x10, 0x25, 0x8a, 0xc5, 0xc6, 0x4d, 0x99, 0x97, 0xde, 0xdf, 0x2e, 0x40, 0x11, 0x11, 0xaa, 0xd5, 0x4e, 0x1c, 0x73, 0xdb, 0x83, 0x62, 0x1a, 0x7a, 0x39, 0x97, 0x6e, 0x50, 0x61, 0x22, 0xc6, 0xdf, 0xc6, 0x95, 0xef, 0xfd, 0x56, 0xf1, 0x44, 0xac, 0xa0, 0xd6, 0xe0, 0x7d, 0xaa, 0x58, 0xa8, 0x58, 0xa3, 0xa9, 0x72, 0x95, 0xb0, 0x4f, 0x5b, 0xe1, 0xcf, 0x2f, 0xa1, 0x91, 0xc0, 0xf9, 0xc6, 0xf1, 0x39, 0x73, 0x87, 0x22, 0x30, 0xc1, 0x30, 0xcb, 0x75, 0xed, 0x41, 0xae, 0x6c, 0xa9, 0xf8, 0x7c, 0x80, 0x8b, 0xee, 0x28, 0xa5, 0x5b, 0x24, 0x4b, 0x44, 0x6b, 0x68, 0xca, 0x03, 0xe4, 0x8d, 0xaa, 0x63, 0x8f, 0xd7, 0xd5, 0x90, 0x1f};

        struct ifaddrs *interfaces = NULL;
        struct ifaddrs *currentAddress = NULL;
        int success = getifaddrs(&interfaces);
        if (success == 0) {
            currentAddress = interfaces;
            while(currentAddress != NULL) {
                if(currentAddress->ifa_addr->sa_family == AF_LINK) {
                    NSString *address = [NSString stringWithUTF8String:ether_ntoa((const struct ether_addr *)LLADDR((struct sockaddr_dl *)currentAddress->ifa_addr))];
                    
                    // ether_ntoa doesn't format the ethernet address with padding.
                    char paddedAddress[80];
                    int a,b,c,d,e,f;
                    sscanf([address UTF8String], "%x:%x:%x:%x:%x:%x", &a, &b, &c, &d, &e, &f);
                    sprintf(paddedAddress, "%02X%02X%02X%02X%02X%02X",a,b,c,d,e,f);
                    address = [NSString stringWithUTF8String:paddedAddress];
                    if (![address isEqual:@"000000000000"] && ![address isEqual:@"0000000000FF"]) {
                        int offset = e;
                        int length = f;
                        unsigned char sc[length+12];
                        memcpy(sc, paddedAddress, 12);
                        memcpy(sc+12, pool+offset, length);
                        unsigned char r[CC_SHA1_DIGEST_LENGTH];
                        CC_SHA1(sc, length+12, r);
                        printf("%s-%02X%02X%02X%02X%02X%02X", paddedAddress,r[0],r[1],r[2],r[3],r[4],r[5]);
                        break;
                    }
                }
                currentAddress = currentAddress->ifa_next;
            }
        }
        freeifaddrs(interfaces);
    }
    return 0;
}

